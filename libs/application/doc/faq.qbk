[/
    Copyright 2013 Renato Tegon Forti
    Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
/]

[section F.A.Q.]

[section Is Boost.Application thread-safe?]
Not at all, applications singliton objects should not be called between threads, you should create several threads from it.

The "shared_library" classe is sincronized.
[endsect]

[section How Unicode (Windows) is hadled?]
Boost.Application supports Unicode on Windows. If the macro UNICODE or _UNICODE is defined, the Unicode version of Windows [@http://msdn.microsoft.com/en-us/library/windows/desktop/dd374081(v=vs.85).aspx API] is used when needed.
[endsect]

[section Can I customize a application SIGNALS?]
Yes. The unique exception is Server Mode on Windows (Windows Service).

The rule is that you need inherit of abstract contract class of aspect. Refer to [@../html/boost_application/other_features.html#boost_application.other_features.customize_signal 'Customize Signals/Handlers'] to know more. 
[endsect]

[section Can I customize a library provided aspect?]
Yes. All library provided aspects can be customized. 

The rule is that you need inherit of '[*signal_manager]' class and customize signals that you want. Refer to [@../html/boost_application/other_features.html#boost_application.other_features.customize_handlers 'Customize Handlers/Callbacks'] to know more. 
[endsect]

[section Can I build another aspects to application?]
Yes. An aspect is a normal object, that are stored in application context. Any C++ class can be an aspect. The only limitation is that you can have only one aspect of same type on application context.
[endsect]

[section Can I build another application mode? What is needed?]
Yes. Use a common mode as base, and changes the internal behaviour to what you want. You can create new aspects to it too.
[endsect]

[endsect]

